<?rb ####################################################################### ?>
<?rb ## Copyright (c) by Daniel Davidson                                     ?>
<?rb ## All Rights Reserved.                                                 ?>
<?rb ####################################################################### ?>
<?rb i=Codegen.single_indent() ?>
<?rb if @cls.static_members.length>0 ?>
/// Class static variable definitions
<?rb @cls.static_members.each do |m| ?>
#{m.cpp_type} #{@cls.name}::#{m.variable_name}(#{m.init});
<?rb end ?>

<?rb end ?>
<?rb if @cls.property_tree ?>
#{@cls.property_tree_impl().chomp} 
<?rb end ?>   
<?rb if @cls.streamable ?>
#{Codegen.indent_absolute_text(@cls.streamable_impl().chomp, 0)}
<?rb end ?>   
<?rb ####################################################################### ?>
<?rb ## Nested classes streamers ?>
<?rb ####################################################################### ?>
<?rb if @cls.nested_classes.length > 0 ?>

<?rb @cls.nested_classes.each do |nc| ?>
#{Codegen.indent_absolute_text(nc.streamable_impl().chomp, 0)}
<?rb end ?>
<?rb end ?>
<?rb @cls.forward_enums.each do |enum| ?>
#{Codegen.indent_text(enum.enum_stream_ipml)} 
<?rb end ?>
<?rb if @cls.enums.select { |e| !e.inline }.length > 0 ?>
// Class enumerations
<?rb @cls.enums.each do |enum| ?>
#{Codegen.indent_text(enum.enum_stream_ipml)} 
<?rb end ?>
<?rb end ?>

<?rb if @cls.additions_impl.length>0 ?>
#{Codegen.indent_text(@cls.additions_impl, 0)}

<?rb end ?>
<?rb if @cls.ctor_member_init_method ?>
void #{@cls.name}::ctor_member_init() {
<?rb if @cls.time_ctor_init ?>
#{i}  etf::utils::performance::Block_performance_counter_tracker time_block(&std::cout, "#{@cls.name} init");
<?rb end ?>
#{Codegen.indent_text(Codegen.protect_block("#{@cls.name}::init"), 1)}
}
<?rb end ?>
<?rb if @cls.observer_of.length>0 ?>

#{i}/////////////////////////////////////////////////////////////////
#{i}// Observer methods
#{i}/////////////////////////////////////////////////////////////////
<?rb @cls.observer_of.each do |observer| ?>
#{i}void #{@cls.name}::observe(#{observer} const& observed) {
#{Codegen.protect_block("#{@cls.protect_block_tag} #{observer} observe")}
#{i}}
<?rb end ?>
<?rb end ?>
