#######################################################################
## Copyright (c) by Daniel Davidson                                    
## All Rights Reserved.                                                
#######################################################################
## PREFIX ANY CLASS TEMPLATE DEFINITIONS
if(0 != @cls.template_decls.length)
 _buf << %Q`#{@cls.template_decls_text}\n`
end
if @cls.base_classes.length > 0
 _buf << %Q`#{@cls.cpp_class_type} #{@cls.api_decl_space}#{@cls.name} :
#{Codegen.indent_absolute_text(@cls.base_classes, 1)} 
{\n`
if @cls.q_object
 _buf << %Q`  Q_OBJECT
\n`
end
 _buf << %Q`public:\n`
else
 _buf << %Q`#{@cls.cpp_class_type} #{@cls.api_decl_space}#{@cls.class_def_name} 
{
public:\n`
end
Codegen.indent()
i=Codegen.single_indent()
#######################################################################
## Public static consts
#######################################################################
if @cls.public_static_consts.length > 0
 _buf << %Q`
#{i}// Public static consts\n`
@cls.public_static_consts.each do |sc|
 _buf << %Q`#{Codegen.indent_absolute_text(sc, 1)};\n`
end
end
#######################################################################
## Public enums
#######################################################################
if @cls.enums.length > 0
 _buf << %Q`
#{i}// Class enumerations\n`
@cls.enums.each do |enum|
 _buf << %Q`#{Codegen.indent_absolute_text(enum.enum_header_contents, 1)} \n`
end
end
#######################################################################
## Nested classes
#######################################################################
if @cls.nested_classes.length > 0
 _buf << %Q`
#{i}// Nested classes\n`
@cls.nested_classes.each do |nc|
 _buf << %Q`#{Codegen.indent_absolute_text(nc.class_definition_wrapper, 1)}
\n`
end
end
#######################################################################
## Public typedefs
#######################################################################
if @cls.public_typedefs.length > 0
 _buf << %Q`
#{i}// Class typedefs\n`
@cls.public_typedefs.each do |td|
 _buf << %Q`#{Codegen.indent_absolute_text(td, 1)};\n`
end
end
if @cls.ctor_default_is_private
 _buf << %Q`private:\n`
end
if @cls.ctor_default_is_protected
 _buf << %Q`protected:\n`
end
#######################################################################
## Member init ctor
#######################################################################
if @cls.additional_ctor_parms_come_second
ctor_parm_text_lines = @cls.member_ctor_member_parm_text_lines + @cls.additional_ctor_parms_text_lines
else
ctor_parm_text_lines = @cls.additional_ctor_parms_text_lines + @cls.member_ctor_member_parm_text_lines
end
if ctor_parm_text_lines.length>0 or @cls.ctor_member
 _buf << %Q`
#{i}#{@cls.explicit_tag}#{@cls.name}(
#{Codegen.indent_absolute_text(ctor_parm_text_lines.join(','+Codegen::NL), 2)}\n`
    if @cls.ctor_member_init_text_lines.length>0
 _buf << %Q`#{i}) :
#{Codegen.indent_absolute_text(@cls.ctor_member_init_text_lines.join(','+Codegen::NL), 2)}\n`
    else
 _buf << %Q`#{i})\n`
    end
 _buf << %Q`#{i}{\n`
    if @cls.log_ctor
 _buf << %Q`#{i}#{i}pantheios::log(PANTHEIOS_SEV_DEBUG, "Created #{@cls.name}(", 
#{i}#{i}               pantheios::hex_ptr(reinterpret_cast<void*>(this)),
#{i}#{i}               pantheios::character(')'));\n`
    end
if @cls.ctor_member_init_section
 _buf << %Q`#{Codegen.protect_block("#{@cls.protect_block_tag} ctor member init")}\n`
elsif @cls.ctor_member_init_method or @cls.ctor_member_init_inline_method
 _buf << %Q`#{i}#{i}ctor_member_init();\n`
    end
 _buf << %Q`#{i}}\n`
end
#######################################################################
## Default ctor
#######################################################################
if @cls.ctor_default_decl
 _buf << %Q`#{i}#{@cls.name}();\n`
elsif @cls.ctor_default
if @cls.ctor_default_member_init_text.strip().length>0
 _buf << %Q`#{i}#{@cls.name}() :
#{Codegen.indent_absolute_text(@cls.ctor_default_member_init_text, 2)} \n`
else
 _buf << %Q`#{i}#{@cls.name}()\n`
end
 _buf << %Q`#{i}{\n`
if @cls.log_ctor
 _buf << %Q`#{i}#{i}pantheios::log(PANTHEIOS_SEV_DEBUG, "Created #{@cls.name}(", 
#{i}#{i}               pantheios::hex_ptr(reinterpret_cast<void*>(this)),
#{i}#{i}               pantheios::character(')'));\n`
end
if @cls.ctor_default_init_section
 _buf << %Q`#{Codegen.protect_block("#{@cls.protect_block_tag} ctor default init")}\n`
elsif @cls.ctor_default_init_method or @cls.ctor_default_init_inline_method
 _buf << %Q`#{i}#{i}ctor_default_init();\n`
end
 _buf << %Q`#{i}}\n`
end
if @cls.ctor_default_is_private or @cls.ctor_default_is_protected
 _buf << %Q`public:\n`
end
if @cls.dtor_virtual_decl
 _buf << %Q`#{i}virtual ~#{@cls.name}();
\n`
elsif @cls.dtor_virtual_inline_noop
 _buf << %Q`#{i}virtual ~#{@cls.name}() = 0;
\n`
elsif @cls.dtor_decl
 _buf << %Q`#{i}~#{@cls.name}();
\n`
elsif @cls.log_dtor
 _buf << %Q`#{i}~#{@cls.name}() {
#{i}#{i}pantheios::log(PANTHEIOS_SEV_DEBUG, "Destroyed #{@cls.name}(", 
#{i}#{i}               pantheios::hex_ptr(reinterpret_cast<void*>(this)),
#{i}#{i}               pantheios::character(')'));
#{i}}\n`
end
if @cls.comparable
 _buf << %Q`#{Codegen.indent_absolute_text(@cls.op_less_than_text, 1)}
\n`
end
if @cls.op_equal
 _buf << %Q`#{Codegen.indent_absolute_text(@cls.op_eq_text, 1)}
\n`
end
import('cpp_class_to_string_list_inline_def.tmpl')
if @cls.streamable_friend_decl_required
 _buf << %Q`#{Codegen.indent_absolute_text(@cls.streamable_header().chomp, 1)}
\n`
end
if @cls.property_tree
 _buf << %Q`
#{i}/// Support for writing members as property tree
#{i}void to_stream_as_property_tree(std::ostream &out) const;

#{i}/// Support for reading members previously written as property tree
#{i}void from_stream_as_property_tree(std::istream &in);

#{i}/// Support for writing members to a property tree
#{i}void to_property_tree(std::string const& path, boost::property_tree::ptree &out) const;

#{i}/// Support for reading members previously written from property tree
#{i}void from_property_tree(std::string const& path, boost::property_tree::ptree const& in);

\n`
end
import('cpp_class_boost_serializable.tmpl')
if @cls.observer_of.length>0
 _buf << %Q`#{i}/////////////////////////////////////////////////////////////////
#{i}// Observer methods
#{i}/////////////////////////////////////////////////////////////////\n`
@cls.observer_of.each do |observer|
 _buf << %Q`#{i}void observe(#{observer} const& observed);
\n`
end
end
if @cls.observer_of_inline.length>0
 _buf << %Q`#{i}/////////////////////////////////////////////////////////////////
#{i}// Observer inline methods
#{i}/////////////////////////////////////////////////////////////////\n`
@cls.observer_of_inline.each do |observer|
 _buf << %Q`#{i}void observe(#{observer} const& observed) {
#{Codegen.protect_block("#{@cls.protect_block_tag} #{observer} observe")}
#{i}}
\n`
end
end
import('cpp_class_member_accessors.tmpl')
if @cls.public_header_section
 _buf << %Q`public:
#{Codegen.protect_block("#{@cls.protect_block_tag} public header section")}
\n`
end
if @cls.additions_public_header.length>0
 _buf << %Q`public:
#{Codegen.indent_text(@cls.additions_public_header, 0)}\n`
end
if @cls.protected_header_section
 _buf << %Q`protected:
#{Codegen.protect_block("#{@cls.protect_block_tag} protected header section")}
\n`
end
if @cls.additions_protected_header.length>0
 _buf << %Q`protected:
#{Codegen.indent_text(@cls.additions_protected_header)}\n`
end
if @cls.private_header_section
 _buf << %Q`private:
#{Codegen.protect_block("#{@cls.protect_block_tag} private header section")}
\n`
end
if @cls.additions_private_header.length>0
 _buf << %Q`private:
#{Codegen.indent_text(@cls.additions_private_header, 0)}\n`
end
if @cls.declare_ctor_member_init
 _buf << %Q`private:
#{i}//! Initialize the instance
#{i}void ctor_member_init();\n`
elsif @cls.declare_ctor_member_init_inline
 _buf << %Q`private:
#{i}//! Initialize the instance
#{i}inline void ctor_member_init() {\n`
if @cls.time_ctor_init
 _buf << %Q`#{i}  etf::utils::performance::Block_performance_counter_tracker time_block(&std::cout, "#{@cls.name} init");\n`
end
 _buf << %Q`#{Codegen.indent_text(Codegen.protect_block("#{@cls.name}::init"), 1)}
#{i}}\n`
end
if @cls.declare_ctor_default_init
 _buf << %Q`private:
#{i}//! Initialize the instance
#{i}void ctor_default_init();\n`
elsif @cls.declare_ctor_default_init_inline
 _buf << %Q`private:
#{i}//! Initialize the instance
#{i}inline void ctor_default_init() {\n`
if @cls.time_ctor_init
 _buf << %Q`#{i}  etf::utils::performance::Block_performance_counter_tracker time_block(&std::cout, "#{@cls.name} ctor_default_init");\n`
end
 _buf << %Q`#{Codegen.indent_text(Codegen.protect_block("#{@cls.name}::ctor_default_init"), 1)}
#{i}}\n`
end
if @cls.q_object
 _buf << %Q`
#{Codegen.indent_text(Codegen.protect_block("#{@cls.name}::slots"), 1)}
\n`
end
import('cpp_class_member_definitions.tmpl')
if @cls.hdf5_log_group_manager and !@cls.struct
@cls.hdf5_log_group_manager.logging_classes.each do |logging_class|
 _buf << %Q`
#{i}friend class #{@cls.namespace.join('::')}::#{logging_class.name};
#{i}typedef boost::shared_ptr< #{logging_class.name} > #{logging_class.name}_ptr;
\n`
end
end
@cls.friend_decls.each do |friend_decl|
 _buf << %Q`#{i}#{friend_decl};\n`
end
if @cls.singleton
 _buf << %Q`#{i}friend class etf::patterns::Singleton_impl< #{@cls.name} >;\n`
end
i=Codegen.outdent()
 _buf << %Q`};\n`
