#######################################################################
## Copyright (c) by Vincent Greff                                      
## All Rights Reserved.                                                
#######################################################################
i=Codegen.single_indent()
if @cls.streamable_friend_decl_required
 _buf << %Q`// Support for streaming non-static streamable members of #{@cls.name}\n`
if @cls.streamable_inline or @cls.streamable_inline_custom
 _buf << %Q`#{@cls.template_decl('inline')}\n`
end
 _buf << %Q`#{@cls.api_decl_space}MemStream& operator<<(MemStream& out, #{@cls.scoped(@cls.templatized(@cls.name))} const& item)
{\n`
if @cls.streamers_included
 _buf << %Q`#{i}using etf::utils::streamers::operator<<;\n`
end
if @cls.streamable_custom or @cls.streamable_inline_custom
 _buf << %Q`#{Codegen.protect_block("#{@cls.protect_block_tag} custom streamer")}\n`
else
 _buf << %Q`\n`
@cls.streamed_bases.each do |sb|
 _buf << %Q`#{i}out << static_cast<#{sb} const&>(item);\n`
end
@cls.streamable_members.each do |m|
if m.streamable_custom
 _buf << %Q`#{Codegen.protect_block("#{m.name} custom streamer")}\n`
else
if m.stream_insert_override
 _buf << %Q`#{i}out << #{m.stream_insert_override};\n`
else
 _buf << %Q`#{i}out << item.#{m.variable_name};\n`
end
end
end
 _buf << %Q`\n`
end
 _buf << %Q`#{i}return out;
}

// Support for streaming non-static streamable members of #{@cls.name}\n`
if @cls.streamable_inline or @cls.streamable_inline_custom
 _buf << %Q`#{@cls.template_decl('inline')}\n`
end
 _buf << %Q`#{@cls.api_decl_space}MemStream& operator>>(MemStream& out, #{@cls.scoped(@cls.templatized(@cls.name))} & item)
{\n`
if @cls.streamers_included
 _buf << %Q`#{i}using etf::utils::streamers::operator>>;\n`
end
if @cls.streamable_custom or @cls.streamable_inline_custom
 _buf << %Q`#{Codegen.protect_block("#{@cls.protect_block_tag} custom streamer")}\n`
else
 _buf << %Q`\n`
@cls.streamed_bases.each do |sb|
 _buf << %Q`#{i}out >> static_cast<#{sb} const&>(item);\n`
end
@cls.streamable_members.each do |m|
if m.streamable_custom
 _buf << %Q`#{Codegen.protect_block("#{m.name} custom streamer")}\n`
else
if m.stream_insert_override
 _buf << %Q`#{i}out >> #{m.stream_insert_override};\n`
else
 _buf << %Q`#{i}out >> item.#{m.variable_name};\n`
end
end
end
 _buf << %Q`\n`
end
 _buf << %Q`#{i}return out;
}
\n`
end
