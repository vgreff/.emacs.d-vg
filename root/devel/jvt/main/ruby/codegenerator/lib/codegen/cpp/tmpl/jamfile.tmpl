<?rb ####################################################################### ?>
<?rb ## Copyright (c) by Daniel Davidson                                     ?>
<?rb ## All Rights Reserved.                                                 ?>
<?rb ####################################################################### ?>
<?rb require 'place' ?>
import package ;
import common ;
import os ;
import feature : set-default ;

constant #{Place.top.upcase}_INSTALL_PATH : #{Place[Place.top].parent + (Place.top + '_install')} ;
constant TOP : #{Place['cpp']} ;

local rule explicit-alias ( id : targets + )
{
    alias $(id) : $(targets) ;
    explicit $(id) ;
}

#          <cxxflags>/P
#          <cxxflags>/showIncludes
#          <toolset>msvc:<linkflags>/VERBOSE:LIB

if [ os.on-windows ] 
{
project etf_projects
        : requirements 
          <define>BOOST_ALL_DYN_LINK
          <define>_SCL_SECURE_NO_WARNINGS
          <toolset>intel:<define>WIN32
          <tag>@$(__name__).tag
          <include>$(BOOST_INCLUDE_PATH)
          <include>$(TINYJSON_INCLUDE_PATH)
	  <include>$(HDF5_INCLUDE_PATH)
	  <include>$(PANTHEIOS_INCLUDE_PATH)
	  <include>$(STLSOFT_INCLUDE_PATH)
          <include>$(STL_INCLUDE_PATH)
          <include>$(OTL_INCLUDE_PATH)
          <include>.
          <library-path>$(BOOST_LIB_PATH)
	  <library-path>$(HDF5_LIB_PATH)
	  <library-path>$(PANTHEIOS_LIB_PATH)
          <toolset>msvc:<define>WIN32
	  <toolset>msvc:<linkflags>/NODEFAULTLIB:libcmt
	  <toolset>msvc:<linkflags>/NODEFAULTLIB:libcmtd
          <toolset>msvc:<cxxflags>/wd4100                  
          <toolset>msvc:<cxxflags>/wd4996
          <toolset>msvc:<cxxflags>/W3
# This looked like a good idea but does no work if you want both static
# and dynamic linked libraries. The problem is, if a library is shared
# only (no static version) then the dll will be built with proper dll
# exports, but the client static libs that use that shared lib will have
# this flag set and thus will not have proper dllimports
#          <link>static:<define>GLOBAL_STATIC_LINKAGE
        :
        : build-dir ../../build-dir
        ;

} 
else 
{

project etf_projects
        : requirements 
          <define>BOOST_ALL_DYN_LINK
          <define>OTL_ODBC_UNIX 
          <variant>debug:<define>DEBUG
          <toolset>gcc:<cxxflags>-Wno-invalid-offsetof
          <toolset>intel:<cxxflags>-fno-strict-aliasing
          <variant>profile:<linkflags>-lpthread
          <include>$(BOOST_INCLUDE_PATH)
          <tag>@$(__name__).tag
          <include>.
          <toolset>intel:<linkflags>-i-static
          <library>/site-config//boost_thread
          <library>/site-config//boost_system
          <library>/site-config//pantheios_core
        :
        : build-dir ../../build-dir
        ;

}

#layout = versioned ;

<?rb @all_libs.each do |lib| ?>
<?rb if lib.static_only ?>
# #{lib.name} is static_only
<?rb elsif lib.shared_only ?>
# #{lib.name} is shared_only
<?rb elsif not lib.header_only ?>
# #{lib.name} is static and shared
<?rb end ?>
<?rb if lib.header_only ?>
# #{lib.name} is header-only
<?rb else ?>
alias #{lib.name} : #{lib.build_path.relative_path_from(Place.place['cpp'])}//#{lib.name} ;
<?rb end ?>
<?rb if lib.unit_tests_required ?>
explicit-alias #{lib.name}_test : #{lib.test_path.relative_path_from(Place.place['cpp'])} ;
<?rb end ?>
<?rb end ?>

################################################################################
# Install targets
################################################################################
package.install etf_install_libs_debug : <install-default-prefix>$(ETF_INSTALL_PATH) <variant>debug : :
<?rb @all_libs.select {|l| not l.header_only }.each do |lib| ?>
    #{lib.name}
<?rb end ?>
    ;

package.install etf_install_libs_release : <install-default-prefix>$(ETF_INSTALL_PATH) <variant>release : :
<?rb @all_libs.select {|l| not l.header_only }.each do |lib| ?>
    #{lib.name} 
<?rb end ?>
    ;

alias etf_libs : 
<?rb @all_libs.select {|l| not l.header_only }.each do |lib| ?>
     #{lib.name} 
<?rb end ?>
     ;

alias etf_install_libs : etf_install_libs_debug etf_install_libs_release ;

# all apps
<?rb @all_apps.each do |app| ?>
alias #{app.name} : #{app.build_path.relative_path_from(Place.place['cpp'])}//#{app.name} ;
<?rb end ?>

alias etf_apps : 
<?rb @all_apps.each do |app| ?>
     #{app.name} 
<?rb end ?>
     ;


############ Install apps
<?rb if @all_apps.length > 0 ?>
alias etf_install_apps_static_debug : 
<?rb @all_apps.each do |app| ?>
    #{app.build_path.relative_path_from(Place.place['cpp'])}//etf_install_static_debug 
<?rb end ?>
  : <link>static <variant>debug ;
explicit etf_install_apps_static_debug ;

alias etf_install_apps_shared_debug : 
<?rb @all_apps.each do |app| ?>
    #{app.build_path.relative_path_from(Place.place['cpp'])}//etf_install_shared_debug
<?rb end ?>
  : <link>shared <variant>debug ;
explicit etf_install_apps_shared_debug ;


alias etf_install_apps_static_release : 
<?rb @all_apps.each do |app| ?>
    #{app.build_path.relative_path_from(Place.place['cpp'])}//etf_install_static_release 
<?rb end ?>
  : <link>static <variant>release ;

explicit etf_install_apps_static_release ;

alias etf_install_apps_shared_release : 
<?rb @all_apps.each do |app| ?>
    #{app.build_path.relative_path_from(Place.place['cpp'])}//etf_install_shared_release
<?rb end ?>
  : <link>shared <variant>release ;

explicit etf_install_apps_shared_release ;
<?rb end ?>

alias etf_install_apps :
<?rb if @all_apps.length > 0 ?>
      etf_install_apps_static_debug
      etf_install_apps_shared_debug
      etf_install_apps_static_release
      etf_install_apps_shared_release
<?rb end ?>
;

alias etf_unit_tests :
     etf_install_libs
<?rb @all_libs.select {|l| l.unit_tests_required }.each do |lib| ?>
     #{lib.name}_test
<?rb end ?>
;

etf_headers = [ path.glob-tree etf : *.hpp *.h *.ipp *.inc ] ;
package.install etf_install_headers
  : 
  <install-source-root>../cpp 
  <install-default-prefix>$(ETF_INSTALL_PATH)
  :
  :
  : $(etf_headers)
;

alias etf_install :
      etf_install_libs
      etf_install_apps
      etf_install_headers
;

alias etf_install_debug :
      etf_install_headers
      etf_install_libs_debug
<?rb if @all_apps.length > 0 ?>
      etf_install_apps_static_debug
      etf_install_apps_shared_debug
<?rb end ?>
;

alias etf_install_release :
      etf_install_headers
      etf_install_libs_release
<?rb if @all_apps.length > 0 ?>
      etf_install_apps_static_release
      etf_install_apps_shared_release
<?rb end ?>
;

alias etf_tests : 
      etf_install
      etf_unit_tests
      tests/singleton
      tests/api_initializer
;

alias etf_all : etf_libs etf_tests ;

#alias etf_all_static : etf_libs/<link>static etf_tests_static ;
#alias etf_all_shared : etf_libs/<link>shared etf_tests/<link>shared ;

################################################################################
# Aliases to pin Qt to shared libraries
################################################################################
# alias etf_qt_gui : /qt//QtGui/<link>shared : : : ;
# alias etf_qt_core : /qt//QtCore/<link>shared : : : ;
# alias etf_qt : etf_qt_gui etf_qt_core ;
