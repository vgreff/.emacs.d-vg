#######################################################################
## Copyright (c) by Daniel Davidson                                    
## All Rights Reserved.                                                
#######################################################################
require 'codegen'
require 'codegen/cpp'
 _buf << %Q`import os ;
project #{@lib.name}_unit_tests
    :
    :
    ;

ENV_CXXFLAGS = [ os.environ CXXFLAGS ] ;
ENV_LINKFLAGS = [ os.environ LINKFLAGS ] ;

ADDITIONAL_SRC =
#{Codegen.protect_block("additional src", ['# custom', '# end'])}
;

ADDITIONAL_REQUIREMENTS =
#{Codegen.protect_block("additional requirements", ['# custom', '# end'])}
;
\n`
if @lib.unit_tests.size() > 0
 _buf << %Q`import testing ;

rule test_#{@lib.name}
{
   for local fileb in [ glob *.cpp ]
   {
      all_rules += [ run $(fileb) \n`
if !@lib.header_only
 _buf << %Q`         ../build//#{@lib.name}\n`
end
 _buf << %Q`         $(ADDITIONAL_SRC)\n`
requirements = Array.new @lib.jam_requirements
requirements.push '$(PANTHEIOS_LIBS)'
requirements = Codegen::Cpp.clean_ordered(requirements)
requirements.each do |req|
 _buf << %Q`         #{req}\n`
end
 _buf << %Q`      :  # additional args
      :  # test-files
      :  # requirements
         <cxxflags>$(ENV_CXXFLAGS)
         <linkflags>$(ENV_LINKFLAGS)
         $(ADDITIONAL_REQUIREMENTS)\n`
@lib.build_cpp_includes.each do |incl|
 _buf << %Q`         <include>#{incl}\n`
end
@lib.build_cpp_defines.each do |define|
 _buf << %Q`         <define>#{define}\n`
end
 _buf << %Q`         <toolset>msvc:<asynch-exceptions>on         
         <debug-symbols>on
      ] ;
   }
}

test-suite #{@lib.name}_test_suite : [ test_#{@lib.name} ] ;
explicit #{@lib.name}_test_suite ;

# Targets to build unit tests that stay around for debugging\n`
unit_tests = @lib.all_classes.select {|c| c.include_unit_test }.sort {|x,y| x.name <=> y.name }
unit_tests.each do |c|
unit_test_name = c.name.downcase + '_unit_test'
 _buf << %Q`exe #{unit_test_name} :
         test_#{c.impl_filename}\n`
if !@lib.header_only
 _buf << %Q`         ../build//#{@lib.name}\n`
end
 _buf << %Q`         $(ADDITIONAL_SRC)\n`
requirements = Array.new @lib.jam_requirements
requirements.push '$(PANTHEIOS_LIBS)'
requirements = Codegen::Cpp.clean_ordered(requirements)
requirements.each do |req|
 _buf << %Q`         #{req}\n`
end
 _buf << %Q`      :  # additional args
         <cxxflags>$(ENV_CXXFLAGS)
         <linkflags>$(ENV_LINKFLAGS)
         $(ADDITIONAL_REQUIREMENTS)\n`
@lib.build_cpp_includes.each do |incl|
 _buf << %Q`         <include>#{incl}\n`
end
@lib.build_cpp_defines.each do |define|
 _buf << %Q`         <define>#{define}\n`
end
 _buf << %Q`         <define>RUN_NON_BOOST_UNIT_TEST
         # <linkflags>-Xlinker --Map=#{unit_test_name}.map
         # <define>DEBUG_ETF_STARTUP
      :  # test-files
      :  # requirements
;
explicit #{unit_test_name} ;
\n`
end
 _buf << %Q`
\n`
if unit_tests.length > 0
 _buf << %Q`alias #{@lib.name}_unit_tests :\n`
unit_tests.each do |c|
 _buf << %Q`   #{c.name.downcase}_unit_test\n`
end
 _buf << %Q`  ;

explicit #{@lib.name}_unit_tests ;\n`
end
 _buf << %Q`\n`
else
 _buf << %Q`ECHO "NO UNIT TESTS FOR #{@lib.name}" ;\n`
end
 _buf << %Q`\n`
